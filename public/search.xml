<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react + umi + dva + antd技术栈学习</title>
      <link href="/2021/09/22/react-umi-dva-antd-ji-zhu-zhan-xue-xi-1/"/>
      <url>/2021/09/22/react-umi-dva-antd-ji-zhu-zhan-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="react-umi-dva-antd技术栈学习"><a href="#react-umi-dva-antd技术栈学习" class="headerlink" title="react + umi + dva + antd技术栈学习"></a>react + umi + dva + antd技术栈学习</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>首先目录结构大致为这样</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-users</span><br><span class="line">|-index.tsx ------------ 主页面的列表展现</span><br><span class="line">|-index.less ----------- 主页面的样式展现</span><br><span class="line">|-model.ts ------------- 仓库</span><br><span class="line">|-service.ts ----------- 异步接口的逻辑</span><br><span class="line">|-components ----------- 组件文件夹</span><br></pre></td></tr></tbody></table></figure><p>一个完整的React页面就是<strong>View + Service + Model</strong>，分别对应着<strong>index.tsx, service.ts, model.ts</strong></p><ul><li>react：实现UI界面的一个库，没有考虑到数据的存储和流向问题</li><li>redux：专门处理数据的存储和流向问题</li><li>redux-saga：基于redux，专门处理异步数据</li><li>react-router：基于React之上的强大路由库</li><li>dva：基于redux和redux-saga的数据流方案<ul><li>redux和redux-saga是dva的一个基础</li><li>简化开发体验，内置了react-router和fetch</li></ul></li><li>umi：umi以路由为基础，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系<ul><li>umi实际上核心就是react-router</li><li>上述dva实现了一部分的react-router，umi是把react-router再次进行重新的整合和约定</li></ul></li></ul><h2 id="DVA基本流程"><a href="#DVA基本流程" class="headerlink" title="DVA基本流程"></a>DVA基本流程</h2><p>一个项目中有<strong>公有数据</strong>和<strong>私有数据</strong>。在redux中共有数据就是Store的概念；在dva中则提出了一个新概念：Model。所以在dva当中，会把Model理解为公共数据，state理解为私有数据。</p><p>在dva中，页面和仓库是怎么沟通的？</p><p>首先，页面会发起请求，如果是异步数据，需要仓库中转到同步，再返回给页面。也就是页面发送的请求可以是同步也可以是异步，但是回来的时候只有一个口，通过同步返回。</p><p><strong>dva流程图</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c01db6d8beff492f835bc8af9b0b2d09~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p><p>Reducer可以理解为水龙头，水的来源可能不同，但是出水口只有一个，也即Effect接收不同的接口数据，然后统一返回给reducer，reducer再统一返回给页面</p><h2 id="相关api用法"><a href="#相关api用法" class="headerlink" title="相关api用法"></a>相关api用法</h2><ul><li><p><strong>useEffect</strong>：在DOM更新完成后执行某些副作用操作，如数据获取，设置订阅以及手动更改React组件中的DOM等</p><p>useEffect是在render之后浏览器已经渲染结束才执行</p><ol><li>没有第二个参数时，在每次render之后都会执行useEffect中的内容</li><li>第二个参数是可选的，类型是一个空数组；第二个参数是非空数组时，useEffect接受第二个参数来控制跳过执行，下次render后如果指定的值没有变化就不会执行</li><li>第二个参数是空数组时，useEffect只在第一次渲染时执行，由于空数组中没有值，始终没有改变，所以后续render不执行，相当于生命周期中的componentDidMount</li></ol></li><li><p><strong>useCallback和useMemo：</strong>都是性能优化的手段，类似于组件中的shouldComponentUpdate，在子组件中使用shouldComponentUpdate，判定该组件的props和state是否变化，从而避免每次父组件render都去重新渲染子组件。二者分别用来缓存函数与对象，但性能优化也会有成本，缓存过多时会占用内存。大多数情况都不应该使用。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
          <category> umi </category>
          
          <category> dva </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> umi </tag>
            
            <tag> dva </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/2021/09/10/js-hong-bao-shu-shu-ju-lei-xing/"/>
      <url>/2021/09/10/js-hong-bao-shu-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h2><p>对一个值使用typeof操作符会返回下列字符串之一：</p><ul><li>‘undefined’：表示值未定义</li><li>‘boolean’：表示值为布尔值</li><li>‘string’：表示值为字符串</li><li>‘number’：表示值为数值</li><li>‘object’：表示值为对象或null</li><li>‘function’：表示值为函数</li><li>‘symbol’：表示值为符号</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记 2021.09.04</title>
      <link href="/2021/09/04/leetcode-shua-ti-bi-ji-2021.09.04/"/>
      <url>/2021/09/04/leetcode-shua-ti-bi-ji-2021.09.04/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记-2021-09-04"><a href="#Leetcode刷题笔记-2021-09-04" class="headerlink" title="Leetcode刷题笔记 2021.09.04"></a>Leetcode刷题笔记 2021.09.04</h1><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h4 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面"></a><a href="https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</a></h4><p><strong>PS: JS解构赋值交换两个变量的值</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number[]}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> exchange = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">    <span class="keyword">if</span> (nums[left] &amp; <span class="number">1</span>) {</span><br><span class="line">      left++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    }</span><br><span class="line">    [nums[right], nums[left]] = [nums[left], nums[right]];</span><br><span class="line">    right--;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-57-和为s的两个数字"><a href="#剑指-Offer-57-和为s的两个数字" class="headerlink" title="剑指 Offer 57. 和为s的两个数字"></a><a href="https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/">剑指 Offer 57. 和为s的两个数字</a></h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number[]}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">        <span class="keyword">if</span> (nums[left] + nums[right] &gt; target) {</span><br><span class="line">            right--</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] &lt; target) {</span><br><span class="line">            left++</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> [nums[left], nums[right]]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-58-I-翻转单词顺序"><a href="#剑指-Offer-58-I-翻转单词顺序" class="headerlink" title="剑指 Offer 58 - I. 翻转单词顺序"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/">剑指 Offer 58 - I. 翻转单词顺序</a></h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{string}</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{string}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> re = s.split(<span class="string">' '</span>).reverse()</span><br><span class="line">    <span class="comment">// console.log(re)</span></span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; re.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (re[i] == <span class="string">''</span>) <span class="keyword">continue</span></span><br><span class="line">        res.push(re[i])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">' '</span>)</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="搜索与回溯算法（中等）"><a href="#搜索与回溯算法（中等）" class="headerlink" title="搜索与回溯算法（中等）"></a>搜索与回溯算法（中等）</h2><h4 id="剑指-Offer-12-矩阵中的路径"><a href="#剑指-Offer-12-矩阵中的路径" class="headerlink" title="剑指 Offer 12. 矩阵中的路径"></a><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/">剑指 Offer 12. 矩阵中的路径</a></h4><p><strong>深度优先搜索（DFS）+ 剪枝</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{character[][]}</span> <span class="variable">board</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{string}</span> <span class="variable">word</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{boolean}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> exist = <span class="function"><span class="keyword">function</span> (<span class="params">board, word</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> rows = board.length</span><br><span class="line">    <span class="keyword">let</span> cols = board[<span class="number">0</span>].length || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function"><span class="keyword">function</span> (<span class="params">i, j, board, word, index</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; rows - <span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; cols - <span class="number">1</span> || board[i][j] !== word[index]) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (index == word.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">let</span> temp = board[i][j]</span><br><span class="line">        board[i][j] = <span class="string">'-'</span></span><br><span class="line">        <span class="keyword">let</span> res = dfs(i - <span class="number">1</span>, j, board, word, index + <span class="number">1</span>) || dfs(i + <span class="number">1</span>, j, board, word, index + <span class="number">1</span>) || dfs(i, j - <span class="number">1</span>, board, word, index + <span class="number">1</span>) || dfs(i, j + <span class="number">1</span>, board, word, index + <span class="number">1</span>)</span><br><span class="line">        board[i][j] = temp</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++) {</span><br><span class="line">            <span class="keyword">if</span> (dfs(i, j, board, word, <span class="number">0</span>)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-13-机器人的运动范围"><a href="#剑指-Offer-13-机器人的运动范围" class="headerlink" title="剑指 Offer 13. 机器人的运动范围"></a><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">剑指 Offer 13. 机器人的运动范围</a></h4><p><strong>由于涉及到移动所以遍历二维数组找出个数不可行</strong></p><p><strong>通过深度优先搜索（DFS）进行解题</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> movingCount = <span class="function"><span class="keyword">function</span> (<span class="params">m, n, k</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> checkValidation = <span class="function"><span class="keyword">function</span> (<span class="params">m, n</span>) </span>{</span><br><span class="line">        <span class="comment">// console.log(m, n)</span></span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> a = m</span><br><span class="line">        <span class="keyword">let</span> b = n</span><br><span class="line">        <span class="keyword">while</span> (a) {</span><br><span class="line">            sum += a % <span class="number">10</span></span><br><span class="line">            a = <span class="built_in">Math</span>.floor(a / <span class="number">10</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (b) {</span><br><span class="line">            sum += b % <span class="number">10</span></span><br><span class="line">            b = <span class="built_in">Math</span>.floor(b / <span class="number">10</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// console.log(sum)</span></span><br><span class="line">        <span class="keyword">return</span> sum &lt;= k</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function"><span class="keyword">function</span> (<span class="params">i, j, grid</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; m - <span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; n - <span class="number">1</span> || !checkValidation(i, j) || grid[i][j] == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">        grid[i][j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + dfs(i + <span class="number">1</span>, j, grid) + dfs(i, j + <span class="number">1</span>, grid)</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> grid = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(m), <span class="function">() =&gt;</span> <span class="built_in">Array</span>(n))</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">            grid[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> dfs(i, j, grid)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 双指针 </category>
          
          <category> 搜索与回溯算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 搜索与回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记 2021.08.31</title>
      <link href="/2021/08/31/leetcode-shua-ti-bi-ji-2021.08.31/"/>
      <url>/2021/08/31/leetcode-shua-ti-bi-ji-2021.08.31/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记-2021-08-31"><a href="#Leetcode刷题笔记-2021-08-31" class="headerlink" title="Leetcode刷题笔记 2021.08.31"></a>Leetcode刷题笔记 2021.08.31</h1><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p><strong>遍历，指向两个节点，将最小</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{ListNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> cur1 = l1</span><br><span class="line">    <span class="keyword">let</span> cur2 = l2</span><br><span class="line">    <span class="keyword">let</span> cur3 = <span class="keyword">new</span> ListNode()</span><br><span class="line">    <span class="keyword">let</span> head = cur3</span><br><span class="line">    <span class="keyword">while</span> (cur2 !== <span class="literal">null</span> &amp;&amp; cur1 !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (cur1.val &gt;= cur2.val) {</span><br><span class="line">            cur3.next = cur2</span><br><span class="line">            cur3 = cur3.next</span><br><span class="line">            cur2 = cur2.next</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            cur3.next = cur1</span><br><span class="line">            cur3 = cur3.next</span><br><span class="line">            cur1 = cur1.next</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(cur1) {</span><br><span class="line">        cur3.next = cur1</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(cur2) {</span><br><span class="line">        cur3.next = cur2</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// console.log(head)</span></span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-52-两个链表的第一个公共节点"><a href="#剑指-Offer-52-两个链表的第一个公共节点" class="headerlink" title="剑指 Offer 52. 两个链表的第一个公共节点"></a><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指 Offer 52. 两个链表的第一个公共节点</a></h4><p><strong>双指针</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">headA</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">headB</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{ListNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span> (<span class="params">headA, headB</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> p1 = headA</span><br><span class="line">    <span class="keyword">let</span> p2 = headB</span><br><span class="line">    <span class="keyword">while</span> (p1 !== p2) {</span><br><span class="line">        p1 = p1 == <span class="literal">null</span> ? headB : p1.next</span><br><span class="line">        p2 = p2 == <span class="literal">null</span> ? headA : p2.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> p1</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 双指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记 2021.08.30</title>
      <link href="/2021/08/30/leetcode-shua-ti-bi-ji-2021.08.30/"/>
      <url>/2021/08/30/leetcode-shua-ti-bi-ji-2021.08.30/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记-2021-08-30"><a href="#Leetcode刷题笔记-2021-08-30" class="headerlink" title="Leetcode刷题笔记 2021.08.30"></a>Leetcode刷题笔记 2021.08.30</h1><h2 id="双指针（简单）"><a href="#双指针（简单）" class="headerlink" title="双指针（简单）"></a>双指针（简单）</h2><h4 id="剑指-Offer-18-删除链表的节点"><a href="#剑指-Offer-18-删除链表的节点" class="headerlink" title="剑指 Offer 18. 删除链表的节点"></a><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指 Offer 18. 删除链表的节点</a></h4><p><strong>暴力法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{ListNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span> (<span class="params">head, val</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (head.val == val) {</span><br><span class="line">        head = head.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> pre = head</span><br><span class="line">    <span class="keyword">let</span> cur = head.next</span><br><span class="line">    <span class="keyword">while</span> (cur) {</span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) {</span><br><span class="line">            pre.next = cur.next</span><br><span class="line">        }</span><br><span class="line">        pre = cur</span><br><span class="line">        cur = cur.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-22-链表中倒数第k个节点"><a href="#剑指-Offer-22-链表中倒数第k个节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第k个节点"></a><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a></h4><p><strong>快慢指针</strong></p><p><strong>让fast指针先走k个节点，然后再让fast和slow再同时走</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{ListNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getKthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> fast = head</span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> count=k</span><br><span class="line">    <span class="keyword">while</span>(count) {</span><br><span class="line">        fast = fast.next</span><br><span class="line">        count--</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(fast) {</span><br><span class="line">        slow = slow.next</span><br><span class="line">        fast = fast.next</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// console.log(fast, slow)</span></span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 快慢指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 快慢指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记 2021.08.29</title>
      <link href="/2021/08/29/leetcode-shua-ti-bi-ji-2021.08.29/"/>
      <url>/2021/08/29/leetcode-shua-ti-bi-ji-2021.08.29/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记-2021-08-29"><a href="#Leetcode刷题笔记-2021-08-29" class="headerlink" title="Leetcode刷题笔记 2021.08.29"></a>Leetcode刷题笔记 2021.08.29</h1><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h4 id="剑指-Offer-46-把数字翻译成字符串"><a href="#剑指-Offer-46-把数字翻译成字符串" class="headerlink" title="剑指 Offer 46. 把数字翻译成字符串"></a><a href="https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/">剑指 Offer 46. 把数字翻译成字符串</a></h4><p><strong>动态规划：</strong></p><ul><li><strong>状态定义：dp[i]表示到第i个字符有几种不同的翻译</strong></li><li><strong>状态转移方程：</strong><ul><li><strong>0 &lt;= Number(num[j] + num[i]) &lt;= 25: dp[i] = dp[i-1] + dp[i-2]</strong></li><li><strong>Number(num[j] + num[i]) &gt; 25 dp[i] = dp[i-1]</strong></li></ul></li><li><strong>初始化：dp[0] = 1</strong></li></ul><p><em><strong>PS: js中大于小于符号的连用问题。例如（1001&lt;4001&lt;1010）</strong></em></p><p><em><strong>在js的逻辑中，程序会按运算符优先级，先计算左边的，左边的返回应该是bool值，拿这个bool值再结合右边的计算</strong></em></p><ul><li><em><strong>1001&lt;=4001 返回true（即1）</strong></em></li><li><em><strong>1 &lt; 1010 返回true</strong></em></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> translateNum = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> dp = []</span><br><span class="line">    num = num.toString()</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment">// console.log(dp[0])</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; num.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Number</span>(num[i - <span class="number">1</span>] + num[i]) &gt;= <span class="number">10</span> &amp;&amp; <span class="built_in">Number</span>(num[i - <span class="number">1</span>] + num[i]) &lt;= <span class="number">25</span>) {</span><br><span class="line">            <span class="comment">// console.log(Number(num[i - 1] + num[i]) &lt;= 25)</span></span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">2</span> &gt;= <span class="number">0</span>) {</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                dp[i] = <span class="number">2</span></span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[num.length - <span class="number">1</span>]</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-48-最长不含重复字符的子字符串"><a href="#剑指-Offer-48-最长不含重复字符的子字符串" class="headerlink" title="剑指 Offer 48. 最长不含重复字符的子字符串"></a><a href="https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/">剑指 Offer 48. 最长不含重复字符的子字符串</a></h4><p>动态规划：</p><ul><li>状态定义：dp[i]表示到第i个字符的字串的无重复字符字串的最大长度</li><li>状态转移方程：设s为s[j]左侧最近的相同字符<ul><li>i&lt;0：dp[i-1] + 1</li><li>dp[i-1]&lt;i-s：dp[i-1] + 1</li><li>dp[i-1]&gt;=i-s：dp[i] = i - s</li></ul></li><li>初始化：dp[0] = 1</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{string}</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">''</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> dp = []</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; s.length; i++) {</span><br><span class="line">        <span class="keyword">let</span> b = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (b &gt;= <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (s[b] == s[i]) {</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            }</span><br><span class="line">            b--</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span> || i - b &gt; dp[i - <span class="number">1</span>]) {</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (res &lt; dp[i]) {</span><br><span class="line">                res = dp[i]</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (i - b &lt;= dp[i - <span class="number">1</span>]) {</span><br><span class="line">            dp[i] = i - b</span><br><span class="line">            <span class="keyword">if</span> (res &lt; dp[i]) {</span><br><span class="line">                res = dp[i]</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记 2021.08.28</title>
      <link href="/2021/08/29/leetcode-shua-ti-bi-ji-2021.08.28/"/>
      <url>/2021/08/29/leetcode-shua-ti-bi-ji-2021.08.28/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记-2021-08-28"><a href="#Leetcode刷题笔记-2021-08-28" class="headerlink" title="Leetcode刷题笔记 2021.08.28"></a>Leetcode刷题笔记 2021.08.28</h1><h2 id="动态规划（中等）"><a href="#动态规划（中等）" class="headerlink" title="动态规划（中等）"></a>动态规划（中等）</h2><h4 id="剑指-Offer-42-连续子数组的最大和"><a href="#剑指-Offer-42-连续子数组的最大和" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和"></a><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a></h4><p><strong>尝试通过暴力解法，最后TLE</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> res = -<span class="literal">Infinity</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; nums.length; j++) {</span><br><span class="line">            <span class="keyword">if</span> (i == j) {</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; res) {</span><br><span class="line">                    res = nums[i]</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> k = i; k &lt;= j; k++) {</span><br><span class="line">                    sum += nums[k]</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;res) {</span><br><span class="line">                    res = sum</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p><strong>通过动态规划求解</strong></p><ul><li><p><strong>状态定义：dp[i]表示以nums[i]结尾的连续子数组的最大和</strong></p></li><li><p><strong>状态转移方程：</strong></p><ul><li><strong>dp[i - 1] &gt; 0, dp[i] = dp[i - 1] + nums[i]</strong></li><li><strong>dp[i - 1] &lt;=0, dp[i] = nums[i]</strong></li></ul></li><li><p><strong>初始化：dp[0] = nums[0]</strong></p></li><li><p><strong>输出：max(dp)</strong></p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> len = nums.length</span><br><span class="line">    <span class="keyword">let</span> dp = []</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">        <span class="keyword">if</span> (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span>) {</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + nums[i]</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dp[i] = nums[i]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> res = -<span class="literal">Infinity</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; res) res = dp[i]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-47-礼物的最大价值"><a href="#剑指-Offer-47-礼物的最大价值" class="headerlink" title="剑指 Offer 47. 礼物的最大价值"></a><a href="https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/">剑指 Offer 47. 礼物的最大价值</a></h4><p><strong>动态规划：</strong></p><ul><li><strong>状态定义：dp[i][j]表示第i行、第j列拿到最多价值礼物</strong></li><li><strong>状态转移方程：</strong><ul><li><strong>dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]</strong></li></ul></li><li><strong>初始化：dp[0][0] = grid[0][0]</strong></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[][]}</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxValue = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> m = grid.length</span><br><span class="line">    <span class="keyword">let</span> n = grid[<span class="number">0</span>].length</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(m), <span class="function">() =&gt;</span> <span class="built_in">Array</span>(n))</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) {</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &lt; <span class="number">0</span> &amp;&amp; j - <span class="number">1</span> &lt; <span class="number">0</span>) {</span><br><span class="line">                dp[i][j] = grid[i][j]</span><br><span class="line">                <span class="comment">// console.log(dp[i][j], i, j)</span></span><br><span class="line">                res = <span class="built_in">Math</span>.max(dp[i][j], res)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &lt; <span class="number">0</span>) {                </span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>] + grid[i][j]</span><br><span class="line">                <span class="comment">// console.log(dp[i][j], i, j)</span></span><br><span class="line">                res = <span class="built_in">Math</span>.max(dp[i][j], res)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> &lt; <span class="number">0</span>) {</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + grid[i][j]</span><br><span class="line">                <span class="comment">// console.log(dp[i][j], i, j)</span></span><br><span class="line">                res = <span class="built_in">Math</span>.max(dp[i][j], res)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }           </span><br><span class="line">            dp[i][j] = <span class="built_in">Math</span>.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + grid[i][j]</span><br><span class="line">            <span class="comment">// console.log(dp[i][j], i, j)</span></span><br><span class="line">            res = <span class="built_in">Math</span>.max(dp[i][j], res)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记 2021.08.26</title>
      <link href="/2021/08/26/leetcode-shua-ti-bi-ji-2021.08.26/"/>
      <url>/2021/08/26/leetcode-shua-ti-bi-ji-2021.08.26/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记-2021-08-26"><a href="#Leetcode刷题笔记-2021-08-26" class="headerlink" title="Leetcode刷题笔记 2021.08.26"></a>Leetcode刷题笔记 2021.08.26</h1><h2 id="动态规划（简单）"><a href="#动态规划（简单）" class="headerlink" title="动态规划（简单）"></a>动态规划（简单）</h2><h4 id="剑指-Offer-28-对称的二叉树"><a href="#剑指-Offer-28-对称的二叉树" class="headerlink" title="剑指 Offer 28. 对称的二叉树"></a><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></h4><p><strong>通过每层存入数组，在头尾比较是否相同判断是否为对称二叉树</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{TreeNode}</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{boolean}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> queue = [root]</span><br><span class="line">    <span class="keyword">while</span> (queue.length) {</span><br><span class="line">        <span class="keyword">let</span> compare = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = queue.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">let</span> n = queue.shift()</span><br><span class="line">            <span class="keyword">if</span> (n !== <span class="literal">null</span>) {</span><br><span class="line">                compare.push(n.val)</span><br><span class="line">                <span class="comment">// console.log(i)</span></span><br><span class="line">                <span class="comment">// console.log(n.left, n.right)</span></span><br><span class="line">                <span class="keyword">if</span> (!n.left) {</span><br><span class="line">                    queue.push(<span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">// console.log('left: ' + null)</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// console.log('left: ' + n.left.val)</span></span><br><span class="line">                    queue.push(n.left)</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (!n.right) {</span><br><span class="line">                    queue.push(<span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">// console.log('right: ' + null)</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// console.log('right: ' + n.right.val)</span></span><br><span class="line">                    queue.push(n.right)</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                compare.push(<span class="literal">null</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> end = compare.length - <span class="number">1</span></span><br><span class="line">        <span class="comment">// console.log(compare)</span></span><br><span class="line">        <span class="keyword">while</span> (compare.length &gt; <span class="number">1</span> &amp;&amp; start &lt;= end) {</span><br><span class="line">            <span class="comment">// console.log(compare[start], compare[end])</span></span><br><span class="line">            <span class="keyword">if</span> (compare[start] !== compare[end]) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">            start++</span><br><span class="line">            end--</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10- I. 斐波那契数列</a></h4><p><strong>通过递归实现，但是简单的递归如果深度过大，就会导致栈溢出，因此选择通过动态规划解决栈溢出问题</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> n1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> n2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">let</span> sum = (n1 + n2) % <span class="number">1000000007</span></span><br><span class="line">        n1 = n2</span><br><span class="line">        n2 = sum</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n1</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-10-II-青蛙跳台阶问题"><a href="#剑指-Offer-10-II-青蛙跳台阶问题" class="headerlink" title="剑指 Offer 10- II. 青蛙跳台阶问题"></a><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a></h4><p><strong>斐波那契数列衍生问题</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numWays = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> n0 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> n1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;n; i++){</span><br><span class="line">        <span class="keyword">let</span> sum = (n0+n1) % <span class="number">1000000007</span></span><br><span class="line">        n0 = n1</span><br><span class="line">        n1 = sum</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n0</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-63-股票的最大利润"><a href="#剑指-Offer-63-股票的最大利润" class="headerlink" title="剑指 Offer 63. 股票的最大利润"></a><a href="https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/">剑指 Offer 63. 股票的最大利润</a></h4><p><strong>遍历找出最大利润（暴力法）</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span> (<span class="params">prices</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; prices.length; j++) {</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) {</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &gt; prices[j]) {</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(prices[j] - prices[i]&gt;res) {</span><br><span class="line">                res = prices[j] - prices[i]</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p><strong>找出历史最低点，再计算当天和历史最低点计算的最大利润</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> minprice = <span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line">    <span class="keyword">let</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> price <span class="keyword">of</span> prices) {</span><br><span class="line">        maxprofit = <span class="built_in">Math</span>.max(price - minprice, maxprofit);</span><br><span class="line">        minprice = <span class="built_in">Math</span>.min(price, minprice);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maxprofit;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记 2021.08.24</title>
      <link href="/2021/08/24/leetcode-shua-ti-bi-ji-2021.08.24/"/>
      <url>/2021/08/24/leetcode-shua-ti-bi-ji-2021.08.24/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记-2021-08-24"><a href="#Leetcode刷题笔记-2021-08-24" class="headerlink" title="Leetcode刷题笔记 2021.08.24"></a>Leetcode刷题笔记 2021.08.24</h1><h2 id="搜索与回溯算法专题"><a href="#搜索与回溯算法专题" class="headerlink" title="搜索与回溯算法专题"></a>搜索与回溯算法专题</h2><h3 id="基础知识回顾"><a href="#基础知识回顾" class="headerlink" title="基础知识回顾"></a>基础知识回顾</h3><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><p><strong>深度优先遍历（DFS）：</strong></p><ul><li><strong>先序遍历：</strong>先访问节点本身，再访问左侧子节点，最后是右侧子节点</li><li><strong>中序遍历：</strong>先访问左侧子节点，再访问节点本身，最后事右侧子节点</li><li><strong>后序遍历：</strong>先访问左侧子节点，在访问右侧子节点，最后访问节点本身</li></ul><p><strong>广度优先遍历（BFS）：</strong></p><p>通过队列的辅助，每次去除队列头部节点访问该节点并将左右子节点分别压入队列</p><h4 id="剑指-Offer-32-I-从上到下打印二叉树"><a href="#剑指-Offer-32-I-从上到下打印二叉树" class="headerlink" title="剑指 Offer 32 - I. 从上到下打印二叉树"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指 Offer 32 - I. 从上到下打印二叉树</a></h4><p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p><p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>，返回：<code>[3,9,20,15,7]</code></p><p><strong>算法：广度优先搜索（BFS）</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{TreeNode}</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number[]}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">let</span> queue = [root]</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">while</span> (queue.length) {</span><br><span class="line">        <span class="keyword">let</span> new_node = queue.shift()</span><br><span class="line">        res.push(new_node.val)</span><br><span class="line"><span class="comment">// 通过将根节点入队，再获取最前面的根节点出队，将子节点入队实现广度优先搜索（BFS）</span></span><br><span class="line">        new_node.left &amp;&amp; queue.push(new_node.left)</span><br><span class="line">        new_node.right &amp;&amp; queue.push(new_node.right)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-32-II-从上到下打印二叉树-II"><a href="#剑指-Offer-32-II-从上到下打印二叉树-II" class="headerlink" title="剑指 Offer 32 - II. 从上到下打印二叉树 II"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></h4><p><strong>通过临时数组tmp存储，并且通过倒序方式实现初始队列长度的遍历</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{TreeNode}</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number[][]}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">let</span> queue = [root]</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.length) {</span><br><span class="line">        <span class="keyword">let</span> tmp = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = queue.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">let</span> new_node = queue.shift()</span><br><span class="line">            tmp.push(new_node.val)</span><br><span class="line"></span><br><span class="line">            new_node.left &amp;&amp; queue.push(new_node.left)</span><br><span class="line">            new_node.right &amp;&amp; queue.push(new_node.right)</span><br><span class="line">        }</span><br><span class="line">        res.push(tmp)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-32-III-从上到下打印二叉树-III"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></h4><p><strong>通过数组reverse()完成逆序操作</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{TreeNode}</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number[][]}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">let</span> queue = [root]</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> re = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.length) {</span><br><span class="line">        <span class="keyword">let</span> tmp = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = queue.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">let</span> new_node = queue.shift()</span><br><span class="line">            tmp.push(new_node.val)</span><br><span class="line"></span><br><span class="line">            new_node.left &amp;&amp; queue.push(new_node.left)</span><br><span class="line">            new_node.right &amp;&amp; queue.push(new_node.right)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (re) {</span><br><span class="line">            res.push(tmp)</span><br><span class="line">            re = !re</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            res.push(tmp.reverse())</span><br><span class="line">            re = !re</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></h4><p><strong>通过先序遍历进行对比</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{TreeNode}</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{TreeNode}</span> <span class="variable">B</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{boolean}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isSubStructure = <span class="function"><span class="keyword">function</span> (<span class="params">A, B</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (!B || !A) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> n = A</span><br><span class="line">    <span class="keyword">let</span> stack = [n]</span><br><span class="line">    <span class="keyword">while</span> (stack.length) {</span><br><span class="line">        <span class="keyword">let</span> n = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> (n.val == B.val) {</span><br><span class="line">            flag = <span class="literal">true</span></span><br><span class="line">            dfs(n, B)</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">        n.right &amp;&amp; stack.push(n.right)</span><br><span class="line">        n.left &amp;&amp; stack.push(n.left)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dfs = <span class="function"><span class="keyword">function</span> (<span class="params">A, B</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (!A || !B) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">// console.log(A.val, A.left, B.val, B.left, B.left &amp;&amp; !A.left)</span></span><br><span class="line">    <span class="keyword">if</span> (A.val !== B.val) <span class="keyword">return</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (B.left &amp;&amp; !A.left) <span class="keyword">return</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (B.right &amp;&amp; !A.right) <span class="keyword">return</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (A.left &amp;&amp; B.left)</span><br><span class="line">        dfs(A.left, B.left)</span><br><span class="line">    <span class="keyword">if</span> (A.right &amp;&amp; B.right)</span><br><span class="line">        dfs(A.right, B.right)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="剑指-Offer-27-二叉树的镜像"><a href="#剑指-Offer-27-二叉树的镜像" class="headerlink" title="剑指 Offer 27. 二叉树的镜像"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">剑指 Offer 27. 二叉树的镜像</a></h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{TreeNode}</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{TreeNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mirrorTree = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> left = mirrorTree(root.left);</span><br><span class="line">    <span class="keyword">const</span> right = mirrorTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 树的遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/22/hello-world/"/>
      <url>/2021/08/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hello world </category>
          
          <category> start </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
